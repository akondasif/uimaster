package org.shaolin.bmdp.persistence.query.generator;

import java.util.HashMap;

import org.shaolin.javacc.sql.SQLConstants;

/**
 * Table instance in search query, constructed with
 * a table name and an alias(generated by alias generator). <p>
 *
 * In search query, a table may join to itself, so
 * we must use table instance to distinguish between them. <p>
 *
 * To avoid conflict, all table instances use
 * the same alias generator. <p>
 *
 */
public class TableInstance
{
	
	/**
     * Table name of this table instance
     */
    private String tableName;

    /**
     * Alias of this table instance
     */
    private String alias;

    /**
     * alias generator. shared by all table instances
     */
    private AliasGenerator generator;
    
    /**
     * field name to field table instance map
     */
    private HashMap<FieldTableKey, TableInstance> fieldTableInstances 
    	= new HashMap<FieldTableKey, TableInstance>();
    
    
    private QueryParsingContext context = null;
	
    /**
     * Create a table instance with a table name and an alias generator
     *
     * @param   tableName       table name
     * @param   generator       table alias generator
     */
    public TableInstance(String tableName, AliasGenerator generator,
        QueryParsingContext context)
    {
        this.tableName  = tableName;
        this.generator  = generator;
        //get alias from the generator
        this.alias      = generator.getNewAlias();
        this.context    = context;
    }
    
    /**
     * Create a table instance with a table name and an alias generator
     *
     * @param   tableName       table name
     * @param   tableAlias      table alias
     * @param   generator       table alias generator
     */
    public TableInstance(String tableName, String tableAlias,
        AliasGenerator generator, QueryParsingContext context)
    {
        this.tableName  = tableName;
        this.generator  = generator;
        this.alias      = tableAlias;
        this.context    = context;
    }
    
    /**
     * Get table name of this table instance
     *
     * @return      table name of this table instance
     */
    public String getTableName()
    {
        return tableName;
    }
    
    /**
     * Get alias of this table instance
     *
     * @return      alias of this table instance
     */
    public String getAlias()
    {
        return alias;
    }
    
    /**
     * Get table instance for object reference field or collection field.
     * Query parser should use this method to get field table instance to 
     * avoid generate table instance for the same field repeatedly.
     *
     * @param       fieldName       field name
     * @param       tblName         table name
     * @return      table instance for object reference field
     *              or collection field
     */
    public TableInstance getFieldTableInstance(String fieldName, String tblName)
    {
        FieldTableKey key = new FieldTableKey(fieldName, tblName);
        TableInstance instance = (TableInstance)fieldTableInstances.get(key);
        if (instance == null)
        {
            instance = new TableInstance(tblName, generator, context);
            context.addTableInstance(instance);
            fieldTableInstances.put(key, instance);
        }
        return instance;
    }
    
    public QueryParsingContext getContext()
    {
        return context;
    }
    
    public int hashCode()
    {
        return tableName.hashCode() * 17 + alias.hashCode();
    }
    
    public boolean equals(Object o)
    {
        if (o instanceof TableInstance)
        {
            TableInstance t = (TableInstance)o;
            return tableName.equals(t.tableName)
                && alias.equals(t.alias);
        }
        return false;
    }
    
    /**
     * Returns a string representation of the object.
     * The result is in the following format: table name, then
     * a blank, then table alias. 
     * 
     * @return a string representation of the object.
     */
    public String toString()
    {
        return tableName + SQLConstants.SPACE + alias;
    }
    
    
    private static class FieldTableKey
    {
        public FieldTableKey(String fieldName, String tableName)
        {
            this.fieldName = fieldName;
            this.tableName = tableName;
        }
        
        public int hashCode()
        {
            return fieldName.hashCode() * 7 +
                tableName.hashCode();
        }
        
        public boolean equals(Object o)
        {
            if (o instanceof FieldTableKey)
            {
                FieldTableKey key = (FieldTableKey)o;
                return key.fieldName.equals(fieldName) &&
                    key.tableName.equals(tableName);
            }
            return false;
        }
        
        private String fieldName = null;
        private String tableName = null;
    }

}
