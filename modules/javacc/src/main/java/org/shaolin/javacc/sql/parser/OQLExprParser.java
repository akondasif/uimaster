/* Generated By:JavaCC: Do not edit this line. OQLExprParser.java */
package org.shaolin.javacc.sql.parser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import org.shaolin.javacc.sql.exception.QueryParsingException;
import org.shaolin.javacc.sql.node.OQLBinaryExpression;
import org.shaolin.javacc.sql.node.OQLCategoryField;
import org.shaolin.javacc.sql.node.OQLCommonField;
import org.shaolin.javacc.sql.node.OQLConditionalExpression;
import org.shaolin.javacc.sql.node.OQLExpression;
import org.shaolin.javacc.sql.node.OQLExtendField;
import org.shaolin.javacc.sql.node.OQLFieldName;
import org.shaolin.javacc.sql.node.OQLFieldPart;
import org.shaolin.javacc.sql.node.OQLFunction;
import org.shaolin.javacc.sql.node.OQLIsNullExpression;
import org.shaolin.javacc.sql.node.OQLLiteral;
import org.shaolin.javacc.sql.node.OQLName;
import org.shaolin.javacc.sql.node.OQLParam;
import org.shaolin.javacc.sql.node.OQLSimpleExpression;
import org.shaolin.javacc.sql.node.OQLSimpleField;
import org.shaolin.javacc.sql.node.OQLSystemField;
import org.shaolin.javacc.sql.node.OQLTypeName;
import org.shaolin.javacc.sql.node.OQLUnaryExpression;

public class OQLExprParser implements OQLExprParserConstants {

    public static OQLExpression parseExpression(String expression)
        throws QueryParsingException, ParseException
    {
        OQLExpression result = null;
        if(expression != null && expression.trim().length() > 0)
        {
            OQLExprParser parser = new OQLExprParser(new StringReader(expression));
            result = parser.parse();
        }
        else
        {
            throw new QueryParsingException("Expression can't be null or empty string");
        }
        return result;
    }

/**********************************************
 * THE OOEE EXPRESSION GRAMMAR STARTS HERE *
 **********************************************/
  final public OQLExpression parse() throws ParseException {
    OQLExpression root;
    root = Expression();
    jj_consume_token(0);
        {if (true) return root;}
    throw new Error("Missing return statement in function");
  }

  final public OQLExpression Expression() throws ParseException {
    OQLExpression node;
    OQLBinaryExpression rightNode;
    Token t;
    String op;
    node = BinaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LARGER:
    case LE:
    case SMALLER:
    case SE:
    case EQUAL:
    case NOTEQUAL:
    case LIKE:
    case IS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LARGER:
      case LE:
      case SMALLER:
      case SE:
      case EQUAL:
      case NOTEQUAL:
      case LIKE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LARGER:
          t = jj_consume_token(LARGER);
          break;
        case SMALLER:
          t = jj_consume_token(SMALLER);
          break;
        case LE:
          t = jj_consume_token(LE);
          break;
        case SE:
          t = jj_consume_token(SE);
          break;
        case EQUAL:
          t = jj_consume_token(EQUAL);
          break;
        case NOTEQUAL:
          t = jj_consume_token(NOTEQUAL);
          break;
        case LIKE:
          t = jj_consume_token(LIKE);
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
            op = t.image;
        rightNode = BinaryExpression();
            node = new OQLConditionalExpression((OQLBinaryExpression)node, op, rightNode);
        break;
      case IS:
        jj_consume_token(IS);
        jj_consume_token(NULL);
            node = new OQLIsNullExpression((OQLBinaryExpression)node);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public OQLBinaryExpression BinaryExpression() throws ParseException {
    OQLBinaryExpression node;
    OQLUnaryExpression tmpNode, tmpNode2;
    List nexts = new ArrayList();
    Token t;
    String op;
    tmpNode = UnaryExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case CONCAT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        t = jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
        break;
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      case CONCAT:
        t = jj_consume_token(CONCAT);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            op = t.image;
      tmpNode2 = UnaryExpression();
            nexts.add(op);
            nexts.add(tmpNode2);
    }
        node = new OQLBinaryExpression(tmpNode, nexts);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public OQLUnaryExpression UnaryExpression() throws ParseException {
    OQLUnaryExpression node;
    OQLExpression tmpNode;
    Token t;
    String op = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            op = t.image;
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    tmpNode = SimpleExpression();
        node = new OQLUnaryExpression(op, tmpNode);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public OQLExpression SimpleExpression() throws ParseException {
    OQLExpression node;
    if (jj_2_1(2147483647)) {
      node = Function();
    } else if (jj_2_2(2147483647)) {
      node = Name();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
        node = Literal();
        break;
      case 31:
        node = Param();
        break;
      case 29:
        jj_consume_token(29);
        node = BinaryExpression();
        jj_consume_token(30);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public OQLSimpleExpression Param() throws ParseException {
    OQLSimpleExpression node;
    Token t;
    jj_consume_token(31);
    t = jj_consume_token(IDENTIFIER);
        node = new OQLParam(t.image);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public OQLSimpleExpression Function() throws ParseException {
    OQLSimpleExpression node;
    OQLBinaryExpression tmpNode = null;
    Token t;
    String funcName;
    boolean isCountAll = false;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(29);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case MULTIPLY:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 29:
    case 31:
    case 33:
    case 35:
    case 37:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
            isCountAll = true;
        break;
      case PLUS:
      case MINUS:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 29:
      case 31:
      case 33:
      case 35:
      case 37:
        tmpNode = BinaryExpression();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(30);
        funcName = t.image;
        node = new OQLFunction(funcName, tmpNode, isCountAll);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public OQLSimpleExpression Literal() throws ParseException {
    OQLSimpleExpression node;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        node = new OQLLiteral(t.image);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public OQLName Name() throws ParseException {
    OQLName node;
    OQLTypeName typeNode = null;
    OQLFieldName fieldNode;
    if (jj_2_3(2147483647)) {
      typeNode = TypeName();
      jj_consume_token(31);
    } else {
      ;
    }
    fieldNode = FieldName();
        node = new OQLName(typeNode, fieldNode);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public OQLTypeName TypeName() throws ParseException {
    OQLExpression node;
    Token t;
    String typeName = null;
    String custRDBName = null;
    t = jj_consume_token(IDENTIFIER);
        typeName = t.image;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_2;
      }
      jj_consume_token(32);
      t = jj_consume_token(IDENTIFIER);
            typeName += "." + t.image;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      t = jj_consume_token(IDENTIFIER);
            custRDBName = t.image;
      jj_consume_token(34);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
        {if (true) return new OQLTypeName(typeName, custRDBName);}
    throw new Error("Missing return statement in function");
  }

  final public OQLFieldName FieldName() throws ParseException {
    OQLFieldName node;
    OQLFieldPart tmpNode;
    List fieldParts = new ArrayList();
    tmpNode = PartField();
        fieldParts.add(tmpNode);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
      jj_consume_token(32);
      tmpNode = PartField();
            fieldParts.add(tmpNode);
    }
        node = new OQLFieldName(fieldParts);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public OQLFieldPart PartField() throws ParseException {
    OQLFieldPart node;
    OQLTypeName typeNode = null;
    OQLSimpleField tmpNode;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      jj_consume_token(29);
      typeNode = TypeName();
      jj_consume_token(30);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    tmpNode = SimpleField();
        node = new OQLFieldPart(typeNode, tmpNode);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public OQLSimpleField SimpleField() throws ParseException {
    OQLSimpleField node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      node = CommonField();
      break;
    case 35:
      node = CategoryField();
      break;
    case 37:
      node = ExtendField();
      break;
    case 33:
      node = SystemField();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public OQLSimpleField CategoryField() throws ParseException {
    OQLSimpleField node;
    Token t1, t2, t3;
    jj_consume_token(35);
    t1 = jj_consume_token(IDENTIFIER);
    t2 = jj_consume_token(IDENTIFIER);
    t3 = jj_consume_token(IDENTIFIER);
    jj_consume_token(36);
        node = new OQLCategoryField(t1.image, t2.image, t3.image);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public OQLSimpleField CommonField() throws ParseException {
    OQLSimpleField node;
    Token t;
    t = jj_consume_token(IDENTIFIER);
        node = new OQLCommonField(t.image);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public OQLSimpleField ExtendField() throws ParseException {
    OQLSimpleField node;
    Token t;
    jj_consume_token(37);
    t = jj_consume_token(IDENTIFIER);
        node = new OQLExtendField(t.image);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public OQLSimpleField SystemField() throws ParseException {
    OQLSimpleField node;
    Token t;
    jj_consume_token(33);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(34);
        node = new OQLSystemField(t.image);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_3R_18() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_3R_8()) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_3R_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    if (jj_scan_token(32)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(32)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(29)) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_11()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(35)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(36)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_5()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(31)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  public OQLExprParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1fc00,0x3fc00,0x3fc00,0x3e0,0x3e0,0x60,0x60,0xa2880000,0xa68800e0,0xa68800e0,0x2880000,0x0,0x0,0x0,0x20000000,0x4000000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2a,0x2a,0x0,0x1,0x2,0x1,0x0,0x2a,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public OQLExprParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public OQLExprParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OQLExprParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public OQLExprParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new OQLExprParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public OQLExprParser(OQLExprParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(OQLExprParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[38];
    for (int i = 0; i < 38; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
