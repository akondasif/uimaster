/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package org.shaolin.javacc.parser;

public interface ParserConstants {

  int EOF = 0;
  int SINGLE_LINE_COMMENT = 9;
  int FORMAL_COMMENT = 10;
  int MULTI_LINE_COMMENT = 11;
  int PRIMITIVETYPE = 13;
  int EQUALOP = 14;
  int RELATIONOP = 15;
  int PLUSMINUS = 16;
  int MULDIV = 17;
  int UNARYPLUS = 18;
  int UNARYMINUS = 19;
  int INCRDECR = 20;
  int SHIFTOP = 21;
  int NEW = 22;
  int INSTANCEOF = 23;
  int ASSIGN = 24;
  int VOID = 25;
  int CLASS = 26;
  int XOR = 27;
  int BIT_AND = 28;
  int BIT_OR = 29;
  int AND = 30;
  int OR = 31;
  int PLUS = 32;
  int MINUS = 33;
  int MULTIPLY = 34;
  int DIVIDE = 35;
  int MODULO = 36;
  int LARGER = 37;
  int LE = 38;
  int SMALLER = 39;
  int SE = 40;
  int EQUAL = 41;
  int NOTEQUAL = 42;
  int INCR = 43;
  int DECR = 44;
  int LSHIFT = 45;
  int RSIGNEDSHIFT = 46;
  int RUNSIGNEDSHIFT = 47;
  int BOOLEAN = 48;
  int SHORT = 49;
  int INTEGER = 50;
  int LONG = 51;
  int FLOAT = 52;
  int DOUBLE = 53;
  int CHAR = 54;
  int BYTE = 55;
  int INTEGER_LITERAL = 56;
  int DECIMAL_LITERAL = 57;
  int HEX_LITERAL = 58;
  int OCTAL_LITERAL = 59;
  int FLOATING_POINT_LITERAL = 60;
  int EXPONENT = 61;
  int STRING_LITERAL = 62;
  int CHARACTER_LITERAL = 63;
  int BOOLEAN_LITERAL = 64;
  int NULL_LITERAL = 65;
  int ABSTRACT = 66;
  int ASSERT = 67;
  int BREAK = 68;
  int CASE = 69;
  int CATCH = 70;
  int CONST = 71;
  int CONTINUE = 72;
  int _DEFAULT = 73;
  int DO = 74;
  int ELSE = 75;
  int ENUM = 76;
  int EXTENDS = 77;
  int FINAL = 78;
  int FINALLY = 79;
  int FOR = 80;
  int GOTO = 81;
  int IF = 82;
  int IMPLEMENTS = 83;
  int IMPORT = 84;
  int INTERFACE = 85;
  int NATIVE = 86;
  int PACKAGE = 87;
  int PRIVATE = 88;
  int PROTECTED = 89;
  int PUBLIC = 90;
  int RETURN = 91;
  int STATIC = 92;
  int STRICTFP = 93;
  int SUPER = 94;
  int SWITCH = 95;
  int SYNCHRONIZED = 96;
  int THIS = 97;
  int THROW = 98;
  int THROWS = 99;
  int TRANSIENT = 100;
  int TRY = 101;
  int VOLATILE = 102;
  int WHILE = 103;
  int IDENTIFIER = 104;
  int LETTER = 105;
  int DIGIT = 106;

  int DEFAULT = 0;
  int IN_SINGLE_LINE_COMMENT = 1;
  int IN_FORMAL_COMMENT = 2;
  int IN_MULTI_LINE_COMMENT = 3;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 7>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 12>",
    "<PRIMITIVETYPE>",
    "<EQUALOP>",
    "<RELATIONOP>",
    "<PLUSMINUS>",
    "<MULDIV>",
    "<UNARYPLUS>",
    "<UNARYMINUS>",
    "<INCRDECR>",
    "<SHIFTOP>",
    "\"new\"",
    "\"instanceof\"",
    "\"=\"",
    "\"void\"",
    "\"class\"",
    "\"^\"",
    "\"&\"",
    "\"|\"",
    "\"&&\"",
    "\"||\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"++\"",
    "\"--\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"boolean\"",
    "\"short\"",
    "\"int\"",
    "\"long\"",
    "\"float\"",
    "\"double\"",
    "\"char\"",
    "\"byte\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<CHARACTER_LITERAL>",
    "<BOOLEAN_LITERAL>",
    "\"null\"",
    "\"abstract\"",
    "\"assert\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"final\"",
    "\"finally\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"interface\"",
    "\"native\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"static\"",
    "\"strictfp\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"try\"",
    "\"volatile\"",
    "\"while\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"{\"",
    "\";\"",
    "\".\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\"}\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\"...\"",
    "\"?\"",
    "\"~\"",
    "\"!\"",
  };

}
