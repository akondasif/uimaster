options {
    LOOKAHEAD=1;
    STATIC = false;
    JAVA_UNICODE_ESCAPE=true;
}

PARSER_BEGIN(OQLExprParser)

package bmiasia.ebos.ormapper.search.parser;

import bmiasia.ebos.ormapper.search.QueryParsingException;
import bmiasia.ebos.ormapper.search.node.*;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class OQLExprParser{

    public static OQLExpression parseExpression(String expression)
        throws QueryParsingException, ParseException
    {
        OQLExpression result = null;
        if(expression != null && expression.trim().length() > 0)
        {
            OQLExprParser parser = new OQLExprParser(new StringReader(expression));
            result = parser.parse();
        }
        else
        {
            throw new QueryParsingException("Expression can't be null or empty string");
        }
        return result;
    }
}

PARSER_END(OQLExprParser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\r"
| "\f"
}

/* OPERATORS */

TOKEN :
{
    <PLUS: "+" >
|   <MINUS: "-" >
|   <MULTIPLY: "*" >
|   <DIVIDE: "/" >
|   <CONCAT: "||" >
|   <LARGER: ">" >
|   <LE: ">=" >
|   <SMALLER: "<" >
|   <SE: "<=" >
|   <EQUAL: "=" >
|   <NOTEQUAL: "!=" >
|   <LIKE: "like" >
|   <IS: "is">
|   <NULL: "null">
}

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
      "'"
      (   (~["\'","\n","\r"])
        | ("''")
      )*
      "'"
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      "$" |
      [
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


/**********************************************
 * THE OOEE EXPRESSION GRAMMAR STARTS HERE *
 **********************************************/

OQLExpression parse():
{
    OQLExpression root;
}
{
    root = Expression() <EOF>
    {
        return root;
    }
}

OQLExpression Expression() :
{
    OQLExpression node;
    OQLBinaryExpression rightNode;
    Token t;
    String op;
}
{
    node = BinaryExpression()
    [
        (
            t = <LARGER>
            |
            t = <SMALLER>
            |
            t = <LE>
            |
            t = <SE>
            |
            t = <EQUAL>
            |
            t = <NOTEQUAL>
            |
            t = <LIKE>
        )
        {
            op = t.image;
        }
        rightNode = BinaryExpression()
        {
            node = new OQLConditionalExpression((OQLBinaryExpression)node, op, rightNode);
        }
        |
        <IS>
        <NULL>
        {
            node = new OQLIsNullExpression((OQLBinaryExpression)node);
        }
    ]
    {
        return node;
    }
}

OQLBinaryExpression BinaryExpression() :
{
    OQLBinaryExpression node;
    OQLUnaryExpression tmpNode, tmpNode2;
    List nexts = new ArrayList();
    Token t;
    String op;
}
{
    tmpNode = UnaryExpression()
    (
        (
            t = <MULTIPLY>
            |
            t = <DIVIDE>
            |
            t = <PLUS>
            |
            t = <MINUS>
            |
            t = <CONCAT>
        )
        {
            op = t.image;
        }
        tmpNode2 = UnaryExpression()
        {
            nexts.add(op);
            nexts.add(tmpNode2);
        }
    )*
    {
        node = new OQLBinaryExpression(tmpNode, nexts);
        return node;
    }
}

OQLUnaryExpression UnaryExpression() :
{
    OQLUnaryExpression node;
    OQLExpression tmpNode;
    Token t;
    String op = null;
}
{
    [
        (
            t = <PLUS>
            |
            t = <MINUS>
        )
        {
            op = t.image;
        }
    ]
    tmpNode = SimpleExpression()
    {
        node = new OQLUnaryExpression(op, tmpNode);
        return node;
    }
}

OQLExpression SimpleExpression() :
{
    OQLExpression node;
}
{
    (
        LOOKAHEAD(<IDENTIFIER> "(")
        node = Function()
        |
        LOOKAHEAD(Name())
        node = Name()
        |
        node = Literal()
        |
        node = Param()
        |
        "("
        node = BinaryExpression()
        ")"
    )
    {
        return node;
    }
}

OQLSimpleExpression Param() :
{
    OQLSimpleExpression node;
    Token t;
}
{
    ":"
    t = <IDENTIFIER>
    {
        node = new OQLParam(t.image);
        return node;
    }
}

OQLSimpleExpression Function() :
{
    OQLSimpleExpression node;
    OQLBinaryExpression tmpNode = null;
    Token t;
    String funcName;
    boolean isCountAll = false;
}
{
    t = <IDENTIFIER>
    "("
    [
        <MULTIPLY>
        {
            isCountAll = true;
        }
        |
        tmpNode = BinaryExpression()
    ]
    ")"
    {
        funcName = t.image;
        node = new OQLFunction(funcName, tmpNode, isCountAll);
        return node;
    }
}

OQLSimpleExpression Literal() :
{
    OQLSimpleExpression node;
    Token t;
}
{
    (
        t = <STRING_LITERAL>
        |
        t = <INTEGER_LITERAL>
        |
        t = <FLOATING_POINT_LITERAL>
    )
    {
        node = new OQLLiteral(t.image);
        return node;
    }
}

OQLName Name() :
{
    OQLName node;
    OQLTypeName typeNode = null;
    OQLFieldName fieldNode;
}
{
    [
        LOOKAHEAD(<IDENTIFIER> ("." <IDENTIFIER>)* ":")
        typeNode = TypeName()
        ":"
    ]
    fieldNode = FieldName()
    {
        node = new OQLName(typeNode, fieldNode);
        return node;
    }
}

OQLTypeName TypeName() :
{
    OQLExpression node;
    Token t;
    String typeName = null;
    String custRDBName = null;
}
{
    t = <IDENTIFIER>
    {
        typeName = t.image;
    }
    (
        "."
        t = <IDENTIFIER>
        {
            typeName += "." + t.image;
        }
    )*
    [
        "["
        t = <IDENTIFIER>
        {
            custRDBName = t.image;
        }
        "]"
    ]
    {
        return new OQLTypeName(typeName, custRDBName);
    }
}

OQLFieldName FieldName() :
{
    OQLFieldName node;
    OQLFieldPart tmpNode;
    List fieldParts = new ArrayList();
}
{
    tmpNode = PartField()
    {
        fieldParts.add(tmpNode);
    }
    (
        "."
        tmpNode = PartField()
        {
            fieldParts.add(tmpNode);
        }
    )*
    {
        node = new OQLFieldName(fieldParts);
        return node;
    }
}

OQLFieldPart PartField() :
{
    OQLFieldPart node;
    OQLTypeName typeNode = null;
    OQLSimpleField tmpNode;
}
{
    [
        "("
        typeNode = TypeName()
        ")"
    ]
    tmpNode = SimpleField()
    {
        node = new OQLFieldPart(typeNode, tmpNode);
        return node;
    }
}

OQLSimpleField SimpleField() :
{
    OQLSimpleField node;
}
{
    (
        node = CommonField()
        |
        node = CategoryField()
        |
        node = ExtendField()
        |
        node = SystemField()
    )
    {
        return node;
    }
}

OQLSimpleField CategoryField() :
{
    OQLSimpleField node;
    Token t1, t2, t3;
}
{
    "{"
    t1 = <IDENTIFIER>
    t2 = <IDENTIFIER>
    t3 = <IDENTIFIER>
    "}"
    {
        node = new OQLCategoryField(t1.image, t2.image, t3.image);
        return node;
    }
}

OQLSimpleField CommonField() :
{
    OQLSimpleField node;
    Token t;
}
{
    t = <IDENTIFIER>
    {
        node = new OQLCommonField(t.image);
        return node;
    }
}

OQLSimpleField ExtendField() :
{
    OQLSimpleField node;
    Token t;
}
{
    "@"
    t = <IDENTIFIER>
    {
        node = new OQLExtendField(t.image);
        return node;
    }
}

OQLSimpleField SystemField() :
{
    OQLSimpleField node;
    Token t;
}
{
    "["
    t = <IDENTIFIER>
    "]"
    {
        node = new OQLSystemField(t.image);
        return node;
    }
}
